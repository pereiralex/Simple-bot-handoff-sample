{"version":3,"file":"communicationTokenCredentialPolicy.js","sourceRoot":"","sources":["../../../src/credential/communicationTokenCredentialPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAwB,+BAA+B,EAAE,MAAM,kBAAkB,CAAC;AAEzF;;;;GAIG;AACH,MAAM,CAAC,MAAM,wCAAwC,GAAG,CACtD,UAAwC,EAClB,EAAE;IACxB,OAAO,+BAA+B,CACpC;QACE,QAAQ,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAE,CAAC;KAC3F,EACD,EAAE,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport { RequestPolicyFactory, bearerTokenAuthenticationPolicy } from \"@azure/core-http\";\n\n/**\n * Creates a new CommunicationTokenCredentialPolicy factory.\n *\n * @param credential - The CommunicationTokenCredential implementation that can supply the user credential.\n */\nexport const createCommunicationTokenCredentialPolicy = (\n  credential: CommunicationTokenCredential\n): RequestPolicyFactory => {\n  return bearerTokenAuthenticationPolicy(\n    {\n      getToken: (_scopes, options) => credential.getToken({ abortSignal: options?.abortSignal })\n    },\n    []\n  );\n};\n"]}