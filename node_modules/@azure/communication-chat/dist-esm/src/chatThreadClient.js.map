{"version":3,"file":"chatThreadClient.js","sourceRoot":"","sources":["../../src/chatThreadClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAGL,gCAAgC,EACjC,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAEL,yBAAyB,EACzB,oCAAoC,EACrC,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAgBvC,OAAO,EACL,wCAAwC,EACxC,wBAAwB,EACxB,4BAA4B,EAC5B,iCAAiC,EACjC,wBAAwB,EACzB,MAAM,kBAAkB,CAAC;AAiB1B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,wCAAwC,EAAE,MAAM,iDAAiD,CAAC;AAC3G,MAAM,mCAAmC,GAAW,IAAI,CAAC;AAEzD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IAW3B,YACmB,QAAgB,EACjC,QAAgB,EAChB,UAAwC,EACxC,UAAmC,EAAE;QAHpB,aAAQ,GAAR,QAAQ,CAAQ;QAH3B,4BAAuB,GAAqB,SAAS,CAAC;QAQ5D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;QAElC,MAAM,OAAO,GAAG,+BAA+B,WAAW,EAAE,CAAC;QAE7D,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC7B,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC;SAC/B;QAED,MAAM,gBAAgB,qBAAQ,OAAO,CAAC,gBAAgB,CAAE,CAAC;QACzD,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE;YAC5C,gBAAgB,CAAC,eAAe,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,OAAO,EAAE,CAAC;SAC7F;aAAM;YACL,gBAAgB,CAAC,eAAe,GAAG,OAAO,CAAC;SAC5C;QAED,MAAM,uBAAuB,mEACnB,OAAO,KAAE,gBAAgB,MAC9B;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,MAAM,UAAU,GAAG,wCAAwC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClF,MAAM,QAAQ,GAAG,yBAAyB,CAAC,uBAAuB,EAAE,UAAU,CAAC,CAAC;QAEhF,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACU,aAAa,CAAC,UAAgC,EAAE;;YAC3D,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;YAEjF,IAAI;gBACF,MAAM,KAA2B,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,uBAAuB,CACnF,IAAI,CAAC,QAAQ,EACb,oCAAoC,CAAC,cAAc,CAAC,CACrD,EAHK,EAAE,SAAS,OAGhB,EAHqB,MAAM,cAAtB,aAAwB,CAG7B,CAAC;gBACF,OAAO,iCAAiC,CAAC,MAAM,CAAC,CAAC;aAClD;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;OAIG;IACU,WAAW,CAAC,KAAa,EAAE,UAA8B,EAAE;;YACtE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC;YAErF,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,CACrD,IAAI,CAAC,QAAQ,EACb,EAAE,KAAK,EAAE,KAAK,EAAE,EAChB,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACU,WAAW,CACtB,OAA2B,EAC3B,UAA8B,EAAE;;YAEhC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC;YAErF,IAAI;gBACF,kCAAkC;gBAClC,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;gBAEzC,MAAM,KAA2B,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,CAC3E,IAAI,CAAC,QAAQ,kCACR,OAAO,GAAK,OAAO,GACxB,oCAAoC,CAAC,cAAc,CAAC,CACrD,EAJK,EAAE,SAAS,OAIhB,EAJqB,MAAM,cAAtB,aAAwB,CAI7B,CAAC;gBACF,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACU,UAAU,CACrB,SAAiB,EACjB,UAA6B,EAAE;;YAE/B,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,6BAA6B,EAAE,OAAO,CAAC,CAAC;YAEpF,IAAI;gBACF,MAAM,KAA2B,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAC1E,IAAI,CAAC,QAAQ,EACb,SAAS,EACT,oCAAoC,CAAC,cAAc,CAAC,CACrD,EAJK,EAAE,SAAS,OAIhB,EAJqB,MAAM,cAAtB,aAAwB,CAI7B,CAAC;gBACF,OAAO,wBAAwB,CAAC,MAAM,CAAC,CAAC;aACzC;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAEc,gBAAgB,CAC7B,YAA8B,EAC9B,UAA+B,EAAE;;YAEjC,MAAM,cAAc,GAAG,oCAAoC,CAAC,OAAO,CAAC,CAAC;YACrE,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;gBACnC,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CACtE,IAAI,CAAC,QAAQ,EACb,cAAc,CACf,CAAA,CAAC;gBACF,YAAY,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAC7D,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAA,CAAC;iBACpE;aACF;YAED,OAAO,YAAY,CAAC,iBAAiB,EAAE;gBACrC,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAC1E,IAAI,CAAC,QAAQ,EACb,YAAY,CAAC,iBAAiB,EAC9B,cAAc,CACf,CAAA,CAAC;gBACF,YAAY,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAC7D,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAA,CAAC;iBACpE;qBAAM;oBACL,MAAM;iBACP;aACF;QACH,CAAC;KAAA;IAEc,eAAe,CAAC,OAA4B;;;;gBACzD,KAAyB,IAAA,KAAA,cAAA,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA,IAAA;oBAAhD,MAAM,IAAI,WAAA,CAAA;oBACnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;iBACb;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;OAIG;IACI,YAAY,CAAC,UAA+B,EAAE;QACnD,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC;QAEtF,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAClD,OAAO;gBACL,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBACD,CAAC,MAAM,CAAC,aAAa,CAAC;oBACpB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,EAAE,CAAC,WAA6B,EAAE,EAAE,EAAE;oBAC1C,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;gBACzD,CAAC;aACF,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,aAAa,CAAC,OAAO;gBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;OAIG;IACU,aAAa,CAAC,SAAiB,EAAE,UAAgC,EAAE;;YAC9E,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;YAEvF,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAC5C,IAAI,CAAC,QAAQ,EACb,SAAS,EACT,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;OAIG;IACU,aAAa,CAAC,SAAiB,EAAE,UAAgC,EAAE;;YAC9E,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;YAEvF,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAC5C,IAAI,CAAC,QAAQ,EACb,SAAS,EACT,OAAO,EACP,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;OAIG;IACU,eAAe,CAC1B,OAA+B,EAC/B,UAAkC,EAAE;;YAEpC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;YAEzF,IAAI;gBACF,MAAM,KAA2B,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAC/E,IAAI,CAAC,QAAQ,EACb,wCAAwC,CAAC,OAAO,CAAC,EACjD,oCAAoC,CAAC,cAAc,CAAC,CACrD,EAJK,EAAE,SAAS,OAIhB,EAJqB,MAAM,cAAtB,aAAwB,CAI7B,CAAC;gBACF,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAEc,oBAAoB,CACjC,iBAAmC,EACnC,UAAmC,EAAE;;YAErC,MAAM,cAAc,GAAG,oCAAoC,CAAC,OAAO,CAAC,CAAC;YACrE,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;gBACxC,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAC1E,IAAI,CAAC,QAAQ,EACb,cAAc,CACf,CAAA,CAAC;gBACF,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAClE,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAA,CAAC;iBACxE;aACF;YAED,OAAO,iBAAiB,CAAC,iBAAiB,EAAE;gBAC1C,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,wBAAwB,CAC9E,IAAI,CAAC,QAAQ,EACb,iBAAiB,CAAC,iBAAiB,EACnC,cAAc,CACf,CAAA,CAAC;gBACF,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAClE,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAA,CAAC;iBACxE;qBAAM;oBACL,MAAM;iBACP;aACF;QACH,CAAC;KAAA;IAEc,mBAAmB,CAChC,OAAgC;;;;gBAEhC,KAAyB,IAAA,KAAA,cAAA,IAAI,CAAC,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA,IAAA;oBAApD,MAAM,IAAI,WAAA,CAAA;oBACnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;iBACb;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;OAIG;IACI,gBAAgB,CACrB,UAAmC,EAAE;QAErC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,mCAAmC,EAAE,OAAO,CAAC,CAAC;QAE1F,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO;gBACL,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBACD,CAAC,MAAM,CAAC,aAAa,CAAC;oBACpB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,EAAE,CAAC,WAA6B,EAAE,EAAE,EAAE;oBAC1C,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;gBAC7D,CAAC;aACF,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,aAAa,CAAC,OAAO;gBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;OAIG;IACU,iBAAiB,CAC5B,WAAoC,EACpC,UAAoC,EAAE;;YAEtC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,oCAAoC,EAAE,OAAO,CAAC,CAAC;YAE3F,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAChD,IAAI,CAAC,QAAQ,EACb,gCAAgC,CAAC,WAAW,CAAC,EAC7C,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACU,sBAAsB,CACjC,UAAyC,EAAE;;YAE3C,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,yCAAyC,EAAE,OAAO,CAAC,CAAC;YAEhG,IAAI;gBACF,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC3B,IAAI,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE;oBAC3C,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,sBAAsB,CACjD,IAAI,CAAC,QAAQ,EACb,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;oBAEF,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC;oBACvC,OAAO,IAAI,CAAC;iBACb;gBAED,MAAM,CAAC,IAAI,CAAC,4CAA4C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;gBAC1E,OAAO,KAAK,CAAC;aACd;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACU,eAAe,CAC1B,OAA+B,EAC/B,UAAkC,EAAE;;YAEpC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;YAEzF,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAC9C,IAAI,CAAC,QAAQ,EACb,OAAO,EACP,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAEc,oBAAoB,CACjC,iBAAmC,EACnC,UAAmC,EAAE;;YAErC,MAAM,cAAc,GAAG,oCAAoC,CAAC,OAAO,CAAC,CAAC;YACrE,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;gBACxC,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAC1E,IAAI,CAAC,QAAQ,EACb,cAAc,CACf,CAAA,CAAC;gBACF,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAClE,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAA,CAAC;iBACpE;aACF;YAED,OAAO,iBAAiB,CAAC,iBAAiB,EAAE;gBAC1C,MAAM,kBAAkB,GAAG,cAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,wBAAwB,CAC9E,IAAI,CAAC,QAAQ,EACb,iBAAiB,CAAC,iBAAiB,EACnC,cAAc,CACf,CAAA,CAAC;gBACF,iBAAiB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAClE,IAAI,kBAAkB,CAAC,KAAK,EAAE;oBAC5B,oBAAM,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAA,CAAC;iBACpE;qBAAM;oBACL,MAAM;iBACP;aACF;QACH,CAAC;KAAA;IAEc,mBAAmB,CAChC,OAAgC;;;;gBAEhC,KAAyB,IAAA,KAAA,cAAA,IAAI,CAAC,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA,IAAA;oBAApD,MAAM,IAAI,WAAA,CAAA;oBACnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;iBACb;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;OAIG;IACI,gBAAgB,CACrB,UAAmC,EAAE;QAErC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,uCAAuC,EAAE,OAAO,CAAC,CAAC;QAE9F,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO;gBACL,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBACD,CAAC,MAAM,CAAC,aAAa,CAAC;oBACpB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,EAAE,CAAC,WAA6B,EAAE,EAAE,EAAE;oBAC1C,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;gBAC7D,CAAC;aACF,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,aAAa,CAAC,OAAO;gBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAEO,yBAAyB,CAAC,OAAa;QAC7C,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAChC,MAAM,kCAAkC,GACtC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;YAE7D,IAAI,kCAAkC,GAAG,mCAAmC,EAAE;gBAC5E,MAAM,CAAC,IAAI,CAAC,+CAA+C,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;gBAC5F,OAAO,KAAK,CAAC;aACd;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { logger } from \"./models/logger\";\nimport { SDK_VERSION } from \"./constants\";\nimport {\n  CommunicationIdentifier,\n  CommunicationTokenCredential,\n  serializeCommunicationIdentifier\n} from \"@azure/communication-common\";\nimport {\n  InternalPipelineOptions,\n  createPipelineFromOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"./tracing\";\nimport {\n  SendReadReceiptRequest,\n  AddParticipantsRequest,\n  SendMessageRequest\n} from \"./models/requests\";\n\nimport {\n  AddChatParticipantsResult,\n  ChatMessage,\n  ChatMessageReadReceipt,\n  ChatParticipant,\n  ChatThreadProperties,\n  SendChatMessageResult,\n  ListPageSettings\n} from \"./models/models\";\nimport {\n  mapToAddChatParticipantsRequestRestModel,\n  mapToChatMessageSdkModel,\n  mapToChatParticipantSdkModel,\n  mapToChatThreadPropertiesSdkModel,\n  mapToReadReceiptSdkModel\n} from \"./models/mappers\";\nimport {\n  ChatThreadClientOptions,\n  SendMessageOptions,\n  GetMessageOptions,\n  DeleteMessageOptions,\n  ListMessagesOptions,\n  UpdateMessageOptions,\n  UpdateTopicOptions,\n  AddParticipantsOptions,\n  ListParticipantsOptions,\n  RemoveParticipantOptions,\n  SendTypingNotificationOptions,\n  SendReadReceiptOptions,\n  ListReadReceiptsOptions,\n  GetPropertiesOptions\n} from \"./models/options\";\nimport { ChatApiClient } from \"./generated/src\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy\";\nconst minimumTypingIntervalInMilliSeconds: number = 8000;\n\n/**\n * The client to do chat operations\n */\nexport class ChatThreadClient {\n  /**\n   * Thread ID of the ChatThreadClient\n   */\n  readonly threadId: string;\n\n  private readonly tokenCredential: CommunicationTokenCredential;\n  private readonly client: ChatApiClient;\n\n  private timeOfLastTypingRequest: Date | undefined = undefined;\n\n  constructor(\n    private readonly endpoint: string,\n    threadId: string,\n    credential: CommunicationTokenCredential,\n    options: ChatThreadClientOptions = {}\n  ) {\n    this.threadId = threadId;\n    this.tokenCredential = credential;\n\n    const libInfo = `azsdk-js-communication-chat/${SDK_VERSION}`;\n\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    const userAgentOptions = { ...options.userAgentOptions };\n    if (options.userAgentOptions.userAgentPrefix) {\n      userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...{ ...options, userAgentOptions },\n      ...{\n        loggingOptions: {\n          logger: logger.info\n        }\n      }\n    };\n\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new ChatApiClient(this.endpoint, pipeline);\n  }\n\n  /**\n   * Gets a chat thread.\n   * Returns the chat thread.\n   * @param options -  Operation options.\n   */\n  public async getProperties(options: GetPropertiesOptions = {}): Promise<ChatThreadProperties> {\n    const { span, updatedOptions } = createSpan(\"ChatClient-GetProperties\", options);\n\n    try {\n      const { _response, ...result } = await this.client.chatThread.getChatThreadProperties(\n        this.threadId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return mapToChatThreadPropertiesSdkModel(result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates a thread's topic.\n   * @param topic - The topic needs to be updated to.\n   * @param options - Operation options.\n   */\n  public async updateTopic(topic: string, options: UpdateTopicOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-UpdateTopic\", options);\n\n    try {\n      await this.client.chatThread.updateChatThreadProperties(\n        this.threadId,\n        { topic: topic },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sends a chat message to a thread identified by threadId.\n   * Returns the id of the created message.\n   * @param request - Request for sending a message.\n   * @param options - Operation options.\n   */\n  public async sendMessage(\n    request: SendMessageRequest,\n    options: SendMessageOptions = {}\n  ): Promise<SendChatMessageResult> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-SendMessage\", options);\n\n    try {\n      // reset typing notification clock\n      this.timeOfLastTypingRequest = undefined;\n\n      const { _response, ...result } = await this.client.chatThread.sendChatMessage(\n        this.threadId,\n        { ...request, ...options },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets a chat message identified by messageId.\n   * Returns the specific message.\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public async getMessage(\n    messageId: string,\n    options: GetMessageOptions = {}\n  ): Promise<ChatMessage> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-GetMessage\", options);\n\n    try {\n      const { _response, ...result } = await this.client.chatThread.getChatMessage(\n        this.threadId,\n        messageId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return mapToChatMessageSdkModel(result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listMessagesPage(\n    pageSettings: ListPageSettings,\n    options: ListMessagesOptions = {}\n  ): AsyncIterableIterator<ChatMessage[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    if (!pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessages(\n        this.threadId,\n        requestOptions\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      }\n    }\n\n    while (pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessagesNext(\n        this.threadId,\n        pageSettings.continuationToken,\n        requestOptions\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listMessagesAll(options: ListMessagesOptions): AsyncIterableIterator<ChatMessage> {\n    for await (const page of this.listMessagesPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of message from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listMessages(options: ListMessagesOptions = {}): PagedAsyncIterableIterator<ChatMessage> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-ListMessages\", options);\n\n    try {\n      const iter = this.listMessagesAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listMessagesPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public async deleteMessage(messageId: string, options: DeleteMessageOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-DeleteMessage\", options);\n\n    try {\n      await this.client.chatThread.deleteChatMessage(\n        this.threadId,\n        messageId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public async updateMessage(messageId: string, options: UpdateMessageOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-UpdateMessage\", options);\n\n    try {\n      await this.client.chatThread.updateChatMessage(\n        this.threadId,\n        messageId,\n        options,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Adds the details of chat participants belonging to the thread identified by threadId.\n   * @param request - Thread participants' details to add in the thread roster\n   * @param options - Operation options.\n   */\n  public async addParticipants(\n    request: AddParticipantsRequest,\n    options: AddParticipantsOptions = {}\n  ): Promise<AddChatParticipantsResult> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-AddParticipants\", options);\n\n    try {\n      const { _response, ...result } = await this.client.chatThread.addChatParticipants(\n        this.threadId,\n        mapToAddChatParticipantsRequestRestModel(request),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listParticipantsPage(\n    continuationState: ListPageSettings,\n    options: ListParticipantsOptions = {}\n  ): AsyncIterableIterator<ChatParticipant[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipants(\n        this.threadId,\n        requestOptions\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipantsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        requestOptions\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listParticipantsAll(\n    options: ListParticipantsOptions\n  ): AsyncIterableIterator<ChatParticipant> {\n    for await (const page of this.listParticipantsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the participants of the thread identified by threadId.\n   * Returns the lists of the participants.\n   * @param options - Operation options.\n   */\n  public listParticipants(\n    options: ListParticipantsOptions = {}\n  ): PagedAsyncIterableIterator<ChatParticipant> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-ListParticipants\", options);\n\n    try {\n      const iter = this.listParticipantsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listParticipantsPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes participant from the thread identified by threadId.\n   * @param participant - Thread participant to remove from the thread roster\n   * @param options - Operation options.\n   */\n  public async removeParticipant(\n    participant: CommunicationIdentifier,\n    options: RemoveParticipantOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-RemoveParticipant\", options);\n\n    try {\n      await this.client.chatThread.removeChatParticipant(\n        this.threadId,\n        serializeCommunicationIdentifier(participant),\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sends a typing notification to the thread.\n   * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval\n   * @param options - - Operation options\n   * @returns True if the typing message notification could be sent, otherwise false.\n   */\n  public async sendTypingNotification(\n    options: SendTypingNotificationOptions = {}\n  ): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-SendTypingNotification\", options);\n\n    try {\n      const dateNow = new Date();\n      if (this.canPostTypingNotification(dateNow)) {\n        await this.client.chatThread.sendTypingNotification(\n          this.threadId,\n          operationOptionsToRequestOptionsBase(updatedOptions)\n        );\n\n        this.timeOfLastTypingRequest = dateNow;\n        return true;\n      }\n\n      logger.info(`Typing Notification NOT Send. [thread_id=${this.threadId}]`);\n      return false;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sends a read receipt to the thread identified by threadId.\n   * @param messageId - The message id of the message that user latest read.\n   * @param request - Request for sending a read receipt\n   * @param options - Operation options.\n   */\n  public async sendReadReceipt(\n    request: SendReadReceiptRequest,\n    options: SendReadReceiptOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-SendReadReceipt\", options);\n\n    try {\n      await this.client.chatThread.sendChatReadReceipt(\n        this.threadId,\n        request,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listReadReceiptsPage(\n    continuationState: ListPageSettings,\n    options: ListReadReceiptsOptions = {}\n  ): AsyncIterableIterator<ChatMessageReadReceipt[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceipts(\n        this.threadId,\n        requestOptions\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceiptsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        requestOptions\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listReadReceiptsAll(\n    options: ListReadReceiptsOptions\n  ): AsyncIterableIterator<ChatMessageReadReceipt> {\n    for await (const page of this.listReadReceiptsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of read receipt from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listReadReceipts(\n    options: ListReadReceiptsOptions = {}\n  ): PagedAsyncIterableIterator<ChatMessageReadReceipt> {\n    const { span, updatedOptions } = createSpan(\"ChatThreadClient-ListChatReadReceipts\", options);\n\n    try {\n      const iter = this.listReadReceiptsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listReadReceiptsPage(settings, updatedOptions);\n        }\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private canPostTypingNotification(dateNow: Date): boolean {\n    if (this.timeOfLastTypingRequest) {\n      const timeSinceLastRequestInMilliSeconds =\n        dateNow.getTime() - this.timeOfLastTypingRequest.getTime();\n\n      if (timeSinceLastRequestInMilliSeconds < minimumTypingIntervalInMilliSeconds) {\n        logger.info(`Typing interval check failed. [last_request=${this.timeOfLastTypingRequest}]`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"]}