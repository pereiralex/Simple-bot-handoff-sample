// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import {
  createTrouterService,
  ITrouterServiceBase,
  ITrouterServiceConfig,
  TrouterState,
  StateChangedListener
} from "@skype/tstrouter";
import { toMessageHandler, toLogProvider, toTelemetrySender } from "./TrouterUtils";
import { defaultTelemetrySettings, createSettings } from "./TrouterSettings";
import {
  ChatEventId,
  BaseChatEvent,
  BaseChatMessageEvent,
  ChatMessageReceivedEvent,
  ChatMessageEditedEvent,
  ChatMessageDeletedEvent,
  ReadReceiptReceivedEvent,
  TypingIndicatorReceivedEvent,
  BaseChatThreadEvent,
  ChatParticipant,
  ChatThreadProperties,
  ChatThreadCreatedEvent,
  ChatThreadDeletedEvent,
  ChatThreadPropertiesUpdatedEvent,
  ParticipantsAddedEvent,
  ParticipantsRemovedEvent
} from "./events/chat";
import {
  CommunicationIdentifier,
  CommunicationUserIdentifier,
  PhoneNumberIdentifier,
  MicrosoftTeamsUserIdentifier,
  UnknownIdentifier,
  CommunicationIdentifierKind,
  CommunicationUserKind,
  PhoneNumberKind,
  MicrosoftTeamsUserKind,
  UnknownIdentifierKind
} from "./events/identifierModels";
import { AzureLogger } from "@azure/logger";
import { AbortSignalLike, AccessToken } from '@azure/core-http';

export enum ConnectionState {
  Unknown = 0,
  Connected = 2,
  Disconnected = 3,
  Switching = 9
}

export interface SignalingClientOptions {
  registrationTimeInMs?: number;
}

export {
  ChatEventId,
  BaseChatEvent,
  BaseChatMessageEvent,
  ChatMessageReceivedEvent,
  ChatMessageEditedEvent,
  ChatMessageDeletedEvent,
  ReadReceiptReceivedEvent,
  TypingIndicatorReceivedEvent,
  BaseChatThreadEvent,
  ChatParticipant,
  ChatThreadProperties,
  ChatThreadCreatedEvent,
  ChatThreadDeletedEvent,
  ChatThreadPropertiesUpdatedEvent,
  ParticipantsAddedEvent,
  ParticipantsRemovedEvent,
  CommunicationIdentifier,
  CommunicationUserIdentifier,
  PhoneNumberIdentifier,
  MicrosoftTeamsUserIdentifier,
  UnknownIdentifier,
  CommunicationIdentifierKind,
  CommunicationUserKind,
  PhoneNumberKind,
  MicrosoftTeamsUserKind,
  UnknownIdentifierKind
};

export interface CommunicationGetTokenOptions {
  abortSignal?: AbortSignalLike;
}

export interface CommunicationTokenCredential {
  getToken(options?: CommunicationGetTokenOptions): Promise<AccessToken>;
}

export interface SignalingClient {
  /**
   * Start the realtime connection.
   */
  start(): void;
  /**
   * Stop the realtime connection and unsubscribe all event handlers.
   */
  stop(): void;
  /**
   * Listen to connectionChanged events.
   */
  on(event: "connectionChanged", listener: (state: ConnectionState) => void): void;
  /**
   * Listen to chatMessageReceived events.
   */
  on(
    event: "chatMessageReceived",
    listener: (payload: ChatMessageReceivedEvent) => void
  ): void;
  /**
   * Listen to typingIndicatorReceived events.
   */
  on(
    event: "typingIndicatorReceived",
    listener: (payload: TypingIndicatorReceivedEvent) => void
  ): void;
  /**
   * Listen to readReceiptReceived events.
   */
  on(
    event: "readReceiptReceived",
    listener: (payload: ReadReceiptReceivedEvent) => void
  ): void;
  /**
   * Listen to chatMessageEdited events.
   */
  on(event: "chatMessageEdited", listener: (payload: ChatMessageEditedEvent) => void): void;
  /**
   * Listen to chatMessageDeleted events.
   */
  on(
    event: "chatMessageDeleted",
    listener: (payload: ChatMessageDeletedEvent) => void
  ): void;
  /**
   * Listen to chatThreadCreated events.
   */
  on(
    event: "chatThreadCreated",
    listener: (payload: ChatThreadCreatedEvent) => void
  ): void;
  /**
   * Listen to chatThreadPropertiesUpdated events.
   */
  on(
    event: "chatThreadPropertiesUpdated",
    listener: (payload: ChatThreadPropertiesUpdatedEvent) => void
  ): void;
  /**
   * Listen to chatThreadDeleted events.
   */
  on(
    event: "chatThreadDeleted",
    listener: (payload: ChatThreadDeletedEvent) => void
  ): void;
  /**
   * Listen to participantsAdded events.
   */
  on(
    event: "participantsAdded",
    listener: (payload: ParticipantsAddedEvent) => void
  ): void;
  /**
   * Listen to participantsRemoved events.
   */
  on(
    event: "participantsRemoved",
    listener: (payload: ParticipantsRemovedEvent) => void
  ): void;
}

export class CommunicationSignalingClient implements SignalingClient {
  private readonly trouter: ITrouterServiceBase;
  private readonly config: ITrouterServiceConfig;
  private stateChangedListener: StateChangedListener = null;

  constructor(
    credential: CommunicationTokenCredential,
    private readonly logger: AzureLogger,
    options?: SignalingClientOptions
  ) {
    this.trouter = createTrouterService(toLogProvider(logger));
    this.config = {
      trouterSettings: createSettings(options),
      skypeTokenProvider: async () => Promise.resolve((await credential.getToken()).token),
      telemetryConfig: {
        eventLogger: toTelemetrySender(logger),
        settings: defaultTelemetrySettings
      }
    };
  }

  public start(): void {
    this.trouter.start(this.config);
  }

  public stop(): void {
    this.trouter.offStateChanged(this.stateChangedListener);
    this.trouter.clearMessageHandlers();
    this.trouter.stop();
  }

  public on(event: "connectionChanged", listener: (state: ConnectionState) => void): void;
  public on(
    event: "chatMessageReceived",
    listener: (payload: ChatMessageReceivedEvent) => void
  ): void;
  public on(
    event: "typingIndicatorReceived",
    listener: (payload: TypingIndicatorReceivedEvent) => void
  ): void;
  public on(
    event: "readReceiptReceived",
    listener: (payload: ReadReceiptReceivedEvent) => void
  ): void;
  public on(event: "chatMessageEdited", listener: (payload: ChatMessageEditedEvent) => void): void;
  public on(
    event: "chatMessageDeleted",
    listener: (payload: ChatMessageDeletedEvent) => void
  ): void;
  public on(
    event: "chatThreadCreated",
    listener: (payload: ChatThreadCreatedEvent) => void
  ): void;
  public on(
    event: "chatThreadPropertiesUpdated",
    listener: (payload: ChatThreadPropertiesUpdatedEvent) => void
  ): void;
  public on(
    event: "chatThreadDeleted",
    listener: (payload: ChatThreadDeletedEvent) => void
  ): void;
  public on(
    event: "participantsAdded",
    listener: (payload: ParticipantsAddedEvent) => void
  ): void;
  public on(
    event: "participantsRemoved",
    listener: (payload: ParticipantsRemovedEvent) => void
  ): void;
  public on(
    event: ChatEventId | "connectionChanged",
    listener: (genericPayload: any) => void
  ): void {
    if (event === "connectionChanged") {
      this.trouter.offStateChanged(this.stateChangedListener);
      this.stateChangedListener = (state: TrouterState, _url: string) => listener(state);
      this.trouter.onStateChanged(this.stateChangedListener);
      return;
    }
    this.trouter.registerMessageHandler(toMessageHandler(event, listener));
  }
}
